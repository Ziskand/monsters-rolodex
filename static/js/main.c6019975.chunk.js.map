{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","CardList","monsters","map","SearchBox","placeholder","handleChange","calssName","type","onChange","App","e","setState","searchField","target","value","console","log","state","fetch","then","resp","json","users","this","filteredMonsters","filter","m","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAIaA,G,YAAO,SAAAC,GAAK,OACvB,sBAAKC,UAAU,iBAAf,UACA,qBAAKC,IAAI,WAAWC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACrB,mCAAML,EAAMI,QAAQE,KAApB,YCFSC,EAAW,SAACP,GACvB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMQ,SAASC,KAAI,SAACL,GAAD,OAClB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCLdK,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACIC,UAAU,SACVC,KAAK,SACLH,YAAaA,EACbI,SAAUH,MCkCHI,G,wDAnCb,aAAe,IAAD,8BACZ,gBAaFJ,aAAe,SAAAK,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,QAAS,kBAAMC,QAAQC,IAAI,EAAKC,MAAML,iBAZ5E,EAAKK,MAAQ,CACXhB,SAAU,IAJA,E,gEAQO,IAAD,OAClBiB,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACG,GAAD,OAAW,EAAKX,SAAS,CAAEV,SAAUqB,S,+BAOrC,IAAD,EAC2BC,KAAKN,MAA/BhB,EADD,EACCA,SAAUW,EADX,EACWA,YACZY,EAAmBZ,EAAcX,EAASwB,QAAO,SAAAC,GAAC,OAAIA,EAAE3B,KAAK4B,cAAcC,SAAShB,EAAYe,kBAAkB1B,EAExH,OACE,sBAAKP,UAAU,MAAf,UACA,oDACE,cAAC,EAAD,CACEU,YAAY,kBACZC,aAAckB,KAAKlB,eAErB,cAAC,EAAD,CAAUJ,SAAUuB,W,GA9BVK,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c6019975.chunk.js","sourcesContent":["import React from \"react\";\n\nimport './card.styles.css'\n\nexport const Card = props => (\n  <div className='card-container'>\n  <img alt=\"monsters\" src={`https://robohash.org/${props.monster.id}?set=set2&size=165x160`}></img>\n    <h1> {props.monster.name} </h1>\n  </div>\n);\n","import React from \"react\";\nimport \"./card-list.style.css\";\n\nimport { Card } from \"../card/card.component\";\n\nexport const CardList = (props) => {\n  return (\n    <div className=\"card-list\">\n      {props.monsters.map((monster) => (\n        <Card key={monster.id} monster={monster} />\n      ))}\n    </div>\n  );\n};\n","import React from 'react';\n\nimport './search-box.style.css'\n\nexport const SearchBox = ({ placeholder, handleChange}) => (\n    <input\n        calssName='search'\n        type='search'\n        placeholder={placeholder}\n        onChange={handleChange}\n    />\n)","import React, { Component } from \"react\";\n\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from './components/search-box/search-box.component';\n\nimport './App.css'\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((resp) => resp.json())\n      .then((users) => this.setState({ monsters: users }));\n  }\n\n  handleChange = e => {\n    this.setState({ searchField: e.target.value }, () => console.log(this.state.searchField))\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = searchField ? monsters.filter(m => m.name.toLowerCase().includes(searchField.toLowerCase())) : monsters;\n\n    return (\n      <div className=\"App\">\n      <h1> Monsters Rolodex </h1>\n        <SearchBox \n          placeholder=\"search monsters\"\n          handleChange={this.handleChange} \n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}